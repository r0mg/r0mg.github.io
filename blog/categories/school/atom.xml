<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: School | Roslynn's Ramblings]]></title>
  <link href="http://r0mg.github.io/blog/categories/school/atom.xml" rel="self"/>
  <link href="http://r0mg.github.io/"/>
  <updated>2015-11-19T03:55:31-05:00</updated>
  <id>http://r0mg.github.io/</id>
  <author>
    <name><![CDATA[Roslynn Graves]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[There's (Already) an App for That]]></title>
    <link href="http://r0mg.github.io/blog/2015/11/16/theres-an-app-for-that/"/>
    <updated>2015-11-16T15:06:52-05:00</updated>
    <id>http://r0mg.github.io/blog/2015/11/16/theres-an-app-for-that</id>
    <content type="html"><![CDATA[<p>Two-thirds of the way through our stint here at Flatiron, it seems like we&rsquo;re finally approaching a point where we can incorporate elements of creativity to make our apps fancy and unique. As we prepare to re-enter project mode and ponder the possibilities of what to make, it can be easy to get overwhelmed in the decision process. Not only do we want to build something functionally representative of our skills, we also want it to be one of a kind. This poses quite a challenge given the sheer number of popular apps and web-based concepts that already exist, and it can feel like everything, in some way shape or form, has already been done. In fact, some statistics support this sentiment:</p>

<ul>
<li>There's an over-abundance of choice in the app market. Millions of apps were available for download in the top 3 app stores as of June 2015.
  <ul>
    <li>Apple App Store: 1,500,000
    <li>Google Play: 1,600,000
    <li>Windows Store: 340,000
  </ul>
<img class="right" src="/images/apple_cumulative_downloads.png" width="350" title="Apple App Store Downloads" >
  <br>
<li>Because users have literal millions of low-risk options in choosing an app to download, they are selective, demanding, impatient and fickle about which ones they use.
<ul>
  <li>Apple App Store: 100 billion cumulative downloads between July 2008 and June 2015.
  <li>Google Play: 50 billion cumulative downloads between August 2010 to July 2013
  <li>Total downloads forecasted to reach 268.69 billion by 2017
  <li>App users in the United States actively use 26.7 apps per month, on average 
</ul>
<br>
<li>Among the comparatively small number of apps that people actively use, the 5 most popular apps by traffic volume dominate 61% of all app traffic

<img class="left" src="/images/popularity_by_traffic_volume.png" width="450" title="Popularity by Traffic Volume" >
<br><br>
<ul>
  <li>If traffic volume alone isn't persuasive enough, app popularity based on the number unique visitors in a given month is still topped by the usuals: Facebook, YouTube, Google, Pandora, Instagram, Netflix, Snapchat, blah blah blah. 
</ul>
</ul>


<p><br>
So how does one stand out among the remaining 1,499,000? Logically, it follows that you need to be very, very unique. In the app market, however, novelty isn&rsquo;t a sustainable competitive advantage. While an emphasis on originality can yield some pretty neat stuff, trying too hard, as with everything else, can be the detrimental to giving people what they want or need (Netflix for Wine?).</p>

<p>The market out there is undoubtedly tough, but the point of this post isn&rsquo;t actually to crush dreams or rag on all of our life choices to become developers. Quite the opposite. In fact, while looking through these dire statistics and related commentary, my first observation was that there can&rsquo;t possibly be a way to determine what any given app is worth based on the available data, because the technology is growing faster than we can assign its value. Second, many successful apps haven&rsquo;t introduced new ideas, but improved upon them.</p>

<p>Most important, there&rsquo;s also data out there that&rsquo;s detected consistencies among objectively successful apps, the forecasted nature of future of demand, as well as considerations to keep in mind when making decisions in an app-based market, whether it be as a job-seeker assessing the potential growth of a startup employer, or in starting a startup.</p>

<p><img class="right" src="/images/unique.jpg" width="350" title="Unique fish" ></p>

<ul>
<li>The less time needed for a user to use, the better. Behavior knows as "app snacking," or logging in for several short sessions of several apps within a day, is prolific.
<li>People stop using apps when they no longer provide value or entertainment. Saving time is of particular value. Successful apps have figured out how to keep the user hooked (ex: Angry Birds).
<li>Survey respondents feel a disconnect between all the digital elements of in their lives and want more integration, i.e. there's need to combine all the apps into one.
<li>Personalization is big, but there are different types of personalization that go beyond stating preferences in the app settings and into what's most relevant (ex. content delivery based on historical data v. real time data v. anticipated actions).
<li>UIs should be simple, minimal and intuitive. Otherwise user gets distracted and moves on to the next one.
<li>App updates should be streamlined - adaptable to changing wants/needs/preferences, and with quick implementation
<li>Too many features is distracting. Developers need to find a way to minimize what the user needs to do and maximize what the app returns.
<li>While there are notable exceptions, and while there may be a few more, the best way to ensure sustainability is to have a functional business model independent of the app. In other words, the app should be a branch of a business rather than the business itself.
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualizing Schema With Rails-ERD]]></title>
    <link href="http://r0mg.github.io/blog/2015/11/01/visualizing-relationships-with-rails-erd/"/>
    <updated>2015-11-01T16:44:05-05:00</updated>
    <id>http://r0mg.github.io/blog/2015/11/01/visualizing-relationships-with-rails-erd</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/scheduler_pic.png" width="250" height="250" title="Class Visual" >
Establishing appropriate relationships between objects is fundamental in developing a functional app. As our apps increase in complexity, so does the level of abstraction in describing these relationships (what IS a post-tag, anyway?). A good way to get started is usually to draw it out, as we often do in class.</p>

<p>This is a great first step for visual learners like myself. In fact, I find it so useful in understanding the various &ldquo;has-many&rdquo; and &ldquo;has-many-through&rdquo; relationships that I almost always start off each lab by physically mapping out the schema and drawing the connecting lines between associated attributes.</p>

<p><img class="left <a" src="href="https://www.dlsweb.rmit.edu.au/lsu/content/1_StudySkills/study_tuts/learning%20styles/graphics/visual.gif">https://www.dlsweb.rmit.edu.au/lsu/content/1_StudySkills/study_tuts/learning%20styles/graphics/visual.gif</a>" title="A Typical Visual Learner" >
While this method has certainly helped me figure out which associations need to be set in each model, it feels a little&hellip;outdated. Also, the more join relationships and connected models involved, the messier the drawing, which kind of defeats the purpose of mapping it out to begin with. Finally, it only represents the relationships that we&rsquo;re trying to establish, and there&rsquo;s no way to check that it matches what&rsquo;s actually been coded.</p>

<p>Enter Rails-ERD, a lovely Rails plugin that generates entity-relationship diagrams based on Active Record models. It works by using open source graph visualization software called <a href="http://www.graphviz.org/">Graphviz</a> to load the attributes and associations within existing Active Record models and combining them into a single diagram. Once installed, a single command can generate a fancy diagram of any domain. For instance, Rails-ERD yields the following for the school scheduler example:</p>

<p><img class="center" src="/images/scheduler_domain.png" title="Scheduler Diagram" ></p>

<p>To generate pretty diagrams of your own apps, first install Graphviz by entering the following on the command line:</p>

<div class="console"><pre><code class="console"><span class="gp">// ♡</span> brew install graphviz   
</code></pre>
</div>


<p>Next, add <code>rails-erd</code> to the application&rsquo;s <code>Gemfile</code>:</p>

<div class="highlight"><pre><code class="ruby"><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s2">"rails-erd"</span>
<span class="k">end</span>
</code></pre>
</div>


<p>After running <code>bundle install</code>, simply run the following to generate a first diagram:</p>

<div class="console"><pre><code class="console"><span class="gp">// ♡</span> erd
</code></pre>
</div>


<p>If everything worked properly, Rails-ERD generated an <code>erd.pdf</code> file of the diagram, which can be seen by running <code>open erd.pdf</code> from the app directory. That&rsquo;s it!</p>

<p>The default output generated through <code>erd</code> can additionally be customized to specify which attributes should be included in the diagram, the types of relationships to display, inheritance hierarches, etc. For instance, if we wanted to display single table inheritance models, only direct relationships, foreign keys and other fields in the table, we would run <code>erd &ndash;inheritance &ndash;direct &ndash;attributes=foreign_keys,content</code> to get the following:</p>

<p><img class="center" src="/images/scheduler_custom.png" title="Scheduler Diagram" ></p>

<p>A comprehensive list of customization options can be found <a href="http://rails-erd.rubyforge.org/customise.html">here</a>. There&rsquo;s also a Rails-ERD API that can be used to extend and/or customize generated output, but that&rsquo;s for another blog ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Databases in Business]]></title>
    <link href="http://r0mg.github.io/blog/2015/10/15/my-second-post-on-octopress/"/>
    <updated>2015-10-15T19:52:09-04:00</updated>
    <id>http://r0mg.github.io/blog/2015/10/15/my-second-post-on-octopress</id>
    <content type="html"><![CDATA[<p>Learning a programming language often involves thinking in abstractions about things that don&rsquo;t really exist. Particularly at the absolute beginner level, it can be challenging to see the big picture behind organizing pigeons and pokemon, and the level of frustration these exercises are capable of provoking seems highly disproportionate to the problem we&rsquo;re trying to solve. My rational mind understands that we&rsquo;re working toward something much bigger than pigeons and pokemon, but it can be easy to lose sight of the end goal.</p>

<p><img class="left <a" src="href="http://placekitten.com/320/250">http://placekitten.com/320/250</a>" title="Catabase" >
One thing that helps me reconcile this frustration is to understand how these abstract concepts are applicable in the real world. When I can see the link between what we&rsquo;re learning and it&rsquo;s potential to effect real change in real things used by real people, I get excited. And databases <em>really</em> excite me.</p>

<p>This has not always been the case. In business school, the concept of database functionality in Enterprise Resource Planning systems (ERPs) was a similar blur of abstraction. I later began to appreciate their importance in ERPs while working as a financial auditor, and this appreciation has only grown since starting my own business (which happens to be centered on data integrity). Now, as we&rsquo;re learning how to manipulate relational data with Ruby, I decided to look back at those ERPs concepts and see how they&rsquo;re relevant to a budding programmer.</p>

<p><img class="right <a" src="href="http://www.inddist.com/sites/inddist.com/files/ERP-Graphic.jpg">http://www.inddist.com/sites/inddist.com/files/ERP-Graphic.jpg</a>" width="450" height="450">
So, what&rsquo;s an ERPs, and why should we care?</p>

<p>Basically, an ERPs is an interactive database of databases. More formally, it’s a suite of integrated software applications that transmit sets of data to one another as they relate to a business’s resources - ex: cash balances, payment obligations, inventory usage, production capacity, payroll, sales revenue, etc. Each department in the business will typically collect, store, manage and/or interpret the data generated from within the department, and the ERP facilitates the flow of data between the departments. For example, the Finance/Accounting department would be able to trace an increase in expenses to the Manufacturing department, whose records show increased production of product X, the increased production of which was prompted by increased demand for product X per the data obtained from Customer Relations.</p>

<p>Demo: <a href="http://www.weberp.org/weberp/index.php">http://www.weberp.org/weberp/index.php</a></p>

<p>Where older systems limited departmental data to local networks, the web-based software in ERPs permits employees, customers and suppliers real-time access to data. This is relevant to developers as the push to even greater levels of interactivity has prompted increased efforts to integrate mobile devices with current systems.</p>

<p><img class="left <a" src="href="http://www.vkinfotek.com/hpi/erpappdesign.gif">http://www.vkinfotek.com/hpi/erpappdesign.gif</a>"></p>

<p>Other considerations&hellip;:</p>

<ul>
<li>Lots of opportunity in ERP software development due to widespread implementation, evolving systems, and customization of systems</li>
<li>Requires that the programming team has a solid understanding of the organization&rsquo;s specific business processes (maybe even better than the employees have themselves)</li>
<li>Scope of design</li>
<li>MVC!!!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post on Octopress]]></title>
    <link href="http://r0mg.github.io/blog/2015/09/28/my-first-post-on-octopress/"/>
    <updated>2015-09-28T18:08:24-04:00</updated>
    <id>http://r0mg.github.io/blog/2015/09/28/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>Hello, World.</p>
]]></content>
  </entry>
  
</feed>
